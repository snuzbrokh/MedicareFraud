routes_network
plot(routes_network,
edge.arrow.size=.2,
edge.color="orange",
vertex.color="orange",
vertex.frame.color="#ffffff",
#vertex.label=V(net)$media,
vertex.label.color="black")
docNet = routes_network
E(docNet)
library(igraph)
net = graph_from_data_frame(d=edges, vertices=nodes, directed=T)
net
plot(net)
E(net)
V(net)
E(net)$type
#V(net)[media=='BBC']
as_adjacency_matrix(net, attr="weight")
net <- simplify(net, remove.multiple = F, remove.loops = T)
plot(net, edge.arrow.size=.4,vertex.label=NA)
V(docNet)
V(net)
net
V(net)$Connection
E(net)$Connection
colors = c("gray50","tomato")
V(net)$color = colors[E(net)$Connection]
V(net)$color
V(net)$color = colors[ifelse(E(net)$Connection=='OtherPhysician',1,0)]
V(net)$color
V(net)$color = colors[ifelse(E(net)$Connection=='OtherPhysician',1,2)]
V(net)$color
V(net)$color = colors[ifelse(E(net)$Connection=='OtherPhysician',2,1)]
deg = degree(net, mode="all")
V(net)$size = deg*2
V(net)$label = NA
E(net)$width = E(net)$weight/6
E(net)$arrow.size = 0.4
E(net)$edge.color = "gray80"
graph_attr(net, "layout") = layout_with_lgl
plot(net)
E(net)$width = E(net)$weight/20
E(net)$arrow.size = 0.4
E(net)$edge.color = "gray80"
graph_attr(net, "layout") = layout_with_lgl
plot(net)
legend(x=-1.5, y=-1.1, c("Newspaper","Television", "Online News"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
colors = c("gray50","tomato")
E(net)$color = colors[ifelse(E(net)$Connection=='OtherPhysician',2,1)]
deg = degree(net, mode="all")
V(net)$size = deg*2
V(net)$label = NA
E(net)$width = E(net)$weight/20
E(net)$arrow.size = 0.4
E(net)$edge.color = "gray80"
graph_attr(net, "layout") = layout_with_lgl
plot(net)
legend(x=-1.5, y=-1.1, c("Operating","Other"), pch=21,
col="#777777", pt.bg=colrs, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(net)
plot(net, edge.color=edge.col, edge.curved=.1)
E(net)$width = E(net)$weight/10
plot(net, edge.color=edge.col, edge.curved=.1)
E(net)$arrow.size = 0.4
E(net)$edge.color = "gray80"
graph_attr(net, "layout") = layout_with_lgl
plot(net)
# Graphopt, good for large networks
l <- layout_with_graphopt(net)
plot(net, layout=l)
#net.bg <- sample_pa(100)
V(net)$size <- 8
V(net)$frame.color <- "white"
V(net)$color <- "orange"
V(net)$label <- ""
E(net)$arrow.mode <- 0
# Default Barabasi Layout
plot(net)
# Random Layout
plot(net, layout=layout_randomly)
plot(net, layout=l)
# Circle Layout
l <- layout_in_circle(net)
plot(net, layout=l)
# Fruchterman-Reingold
l <- layout_with_fr(net)
plot(net, layout=l)
# Kamada Kawai
l <- layout_with_kk(net)
plot(net.bg, layout=l)
# Graphopt, good for large networks
l <- layout_with_graphopt(net)
#net.bg <- sample_pa(100)
V(net)$size <- 8
V(net)$frame.color <- "white"
V(net)$color <- "orange"
V(net)$label <- ""
E(net)$arrow.mode <- 0
# Default Barabasi Layout
plot(net)
# Random Layout
plot(net, layout=layout_randomly)
# Circle Layout
l <- layout_in_circle(net)
plot(net, layout=l)
# Fruchterman-Reingold
l <- layout_with_fr(net)
plot(net, layout=l)
# Kamada Kawai
l <- layout_with_kk(net)
plot(net.bg, layout=l)
# Graphopt, good for large networks
l <- layout_with_graphopt(net)
plot(net, layout=l)
l <- layout_with_fr(net, niter=100)
plot(net, layout=l)
l <- layout_with_fr(net, niter=200)
plot(net, layout=l)
l <- layout_with_fr(net, dim=3)
plot(net, layout=l)
l <- layout_with_grid(net, dim=3)
l <- layout_with_grid(net)
plot(net, layout=l)
l <- layout_on_grid(net)
plot(net, layout=l)
cut.off <- mean(edges$weight)-sd(edges$weight)/2
net.sp <- delete_edges(net, E(net)[weight<cut.off])
plot(net.sp, layout=layout_with_kk)
cut.off <- mean(edges$weight)
net.sp <- delete_edges(net, E(net)[weight<cut.off])
plot(net.sp, layout=layout_with_kk)
par(mfrow=c(1,2))
# Community detection (by optimizing modularity over partitions):
clp <- cluster_optimal(net)
# Community detection returns an object of class "communities"
# which igraph knows how to plot:
plot(clp, net)
edges
nodes
net
V(net)$name
V(net)$label
V(net)$label = nodes$label
V(net)$label
dist.from.Benavidez <- distances(net, v=V(net)[name=="Dr. Thomas Benavídez"],
to=V(net), weights=NA)
# Set colors to plot the distances:
oranges <- colorRampPalette(c("dark red", "gold"))
col <- oranges(max(dist.from.Benavidez)+1)
dist.from.Benavidez
col <- oranges(min(dist.from.Benavidez)+1)
min(dist.from.Benavidez)
edges
dist.from.Benavidez <- distances(net, v=V(net)[label=="Dr. Thomas Benavídez"],
to=V(net), weights=NA)
dist.from.Benavidez
dist.from.Benavidez <- distances(net, v=V(net)[name=="18"],
to=V(net), weights=NA)
dist.from.Benavidez
min(dist.from.Benavidez)
max(dist.from.Benavidez)
# Set colors to plot the distances:
oranges <- colorRampPalette(c("dark red", "gold"))
col <- oranges(min(dist.from.Benavidez)+1)
col <- col[dist.from.Benavidez+1]
plot(net, vertex.color=col, vertex.label=dist.from.Benavidez, edge.arrow.size=.6,
vertex.label.color="white")
i
library('network')
net3 <- network(edges,  vertex.attr=nodes, matrix.type="edgelist",
loops=F, multiple=F, ignore.eval = F)
net3 %v% "col" <- c("gray70", "tomato", "gold")[net3 %v% "media.type"]
plot(net3, vertex.cex=(net3 %v% "audience.size")/7, vertex.col="col")
net3 %v% "col" <- c("gray70", "tomato")[net3 %e% "Connection"]
plot(net3, vertex.cex=(net3 %v% "audience.size")/7, vertex.col="col")
plot(net3, vertex.cex=(net3 %v% "weight")/7, vertex.col="col")
net3 %v%
s
net3
net3 %e% "col" <- c("gray70", "tomato")[net3 %e% "Connection"]
net3
plot(net3, edge.cex=(net3 %e% "weight")/7, vertex.col="col")
plot(net3, edge.cex=(net3 %e% "weight")/7)
detach('package:network')
```{r}
library(ggraph)
library(igraph)
ggraph(net3) +
geom_edge_link() +   # add edges to the plot
geom_node_point() +
theme_bw() # add nodes to the plot
ggraph(net3, layout="lgl") +
geom_edge_fan(color="gray50", width=0.8, alpha=0.5) +
geom_node_point(color=E(net3)$color, size=8) +
theme_void()
ggraph(net3, layout="lgl") +
geom_edge_fan(color="gray50", width=0.8, alpha=0.5) +
geom_node_point(color=V(net3)$color, size=8) +
theme_void()
ggraph(net3, layout="lgl") +
geom_edge_fan(color="gray50", width=0.8, alpha=0.5) +
geom_node_point(size=8) +
theme_void()
ggraph(net3, layout="lgl") +
geom_edge_link() +   # add edges to the plot
geom_node_point() +
theme_bw() # add nodes to the plot
ggraph(net3) +
geom_edge_fan(color="gray50", width=0.8, alpha=0.5) +
geom_node_point() +
theme_bw() # add nodes to the plot
net3
E(net3)
net3 %e% col
net3 %e% "col"
ggraph(net3) +
geom_edge_link(aes(color = Connection, size = weight)) +           # colors by edge type
geom_node_point() +  # size by audience size
theme_void()
nodes
net3
ggraph(net3) +
geom_edge_arc(color="gray", curvature=0.3, aes(size=weight)) +
geom_node_point(color="orange") +
geom_node_text(aes(label = label), size=3, color="gray50", repel=T) +
theme_void()
ggraph(net3) +
geom_edge_arc(color="gray", curvature=0.3, aes(size=weight)) +
geom_node_point(color="orange") +
geom_node_text(aes(label = label), size=1, color="gray50", repel=T) +
theme_void()
ggraph(net3) +
geom_edge_arc(color="gray", curvature=0.3, aes(size=weight)) +
geom_node_point(color="orange") +
geom_node_text(aes(label = label), size=2, color="black", repel=T) +
theme_void()
detach("package:ggraph")
netm <- get.adjacency(net3, attr="weight", sparse=F)
netm <- get.adjacency(net3, attr="weight", sparse=F)
net3 <- network(edges,  vertex.attr=nodes, matrix.type="edgelist",
loops=F, multiple=F, ignore.eval = F)
library('network')
net3 <- network(edges,  vertex.attr=nodes, matrix.type="edgelist",
loops=F, multiple=F, ignore.eval = F)
netm <- get.adjacency(net3, attr="weight", sparse=F)
library(ndtv)
par(mar=c(0,0,0,0))
net3
render.d3movie(net3, usearrows = F, displaylabels = F, bg="#111111",
vertex.border="#ffffff",
#vertex.col =  net3 %v% "col",
#vertex.cex = (net3 %v% "audience.size")/8,
edge.lwd = (net3 %e% "weight")/3,
edge.col = '#55555599',
vertex.tooltip = paste("<b>Name:</b>", (net3 %v% 'label')),
#"<br>",
#"<b>Type:</b>", (net3 %v% 'type.label')),
edge.tooltip = paste("<b>Edge type:</b>", (net3 %e% 'Connection'), "<br>",
"<b>Edge weight:</b>", (net3 %e% "weight" ) ),
launchBrowser=F, filename="Doc-Network.html")
render.d3movie(net3, usearrows = F, displaylabels = F, bg="#111111",
vertex.border="#ffffff",
#vertex.col =  net3 %v% "col",
#vertex.cex = (net3 %v% "audience.size")/8,
edge.lwd = (net3 %e% "weight")/3,
edge.col = '#55555599',
vertex.tooltip = paste("<b>Name:</b>", (net3 %v% 'label')),
#"<br>",
#"<b>Type:</b>", (net3 %v% 'type.label')),
edge.tooltip = paste("<b>Connection to Source:</b>", (net3 %e% 'Connection'), "<br>",
"<b>Number of Claims Filed:</b>", (net3 %e% "weight" ) ),
launchBrowser=F, filename="Doc-Network.html")
vs <- data.frame(onset=0, terminus=50, vertex.id=1:17)
es <- data.frame(onset=1:49, terminus=50,
head=as.matrix(net3, matrix.type="edgelist")[,1],
tail=as.matrix(net3, matrix.type="edgelist")[,2])
es <- data.frame(onset=1:50, terminus=50,
head=as.matrix(net3, matrix.type="edgelist")[,1],
tail=as.matrix(net3, matrix.type="edgelist")[,2])
es <- data.frame(head=as.matrix(net3, matrix.type="edgelist")[,1],
tail=as.matrix(net3, matrix.type="edgelist")[,2])
net3.dyn <- networkDynamic(base.net=net3, edge.spells=es, vertex.spells=vs)
library(tidyverse)
library(network)
docs = read_csv('./data/docConnet.csv')
generate_Network = function(docs){
source = docs %>%
distinct(Doc1) %>%
rename(label = Doc1)
destination = docs %>%
distinct(Doc2) %>%
rename(label = Doc2)
nodes = full_join(source,destination, by='label') %>% rowid_to_column("id") %>% drop_na()
per_route = docs %>%
group_by(Doc1,Doc2,Connection) %>%
summarise(weight = sum(ClaimsFiled)) %>%
ungroup()
per_rotute = per_route %>% rowid_to_column()
edges = per_route %>%
left_join(nodes, by=c('Doc1' = 'label')) %>%
rename(from=id)
edges = edges %>%
left_join(nodes, by = c("Doc2" = 'label')) %>%
rename(to = id)
edges = select(edges,from, to, Connection, weight)
docNet <- network(edges, vertex.attr = nodes,
matrix.type = "edgelist", ignore.eval = FALSE)
}
docs = filter(docs, State == 23, Provider == 'PRV53918') %>% select(-X1)
docs = docs[complete.cases(docs),]
docNet = generate_Network(docs)
docNet
source = docs %>%
distinct(Doc1) %>%
rename(label = Doc1) %>% mutate(type = 'Attending')
source
docs %>% distinct(Doc2)
docs
docs %>% distinct(Doc2,Connection)
docs %>% distinct(Doc2,Connection) %>% mutate(type = ifelse(Connection=='OperatingPhysician','Operating','Other'))
docs %>%
distinct(Doc2,Connection) %>%
mutate(type = ifelse(Connection=='OperatingPhysician','Operating','Other')) %>%
rename(label = Doc2)
source = docs %>%
distinct(Doc1) %>%
rename(label = Doc1) %>% mutate(type = "Attending")
destination = docs %>%
distinct(Doc2,Connection) %>%
mutate(type = ifelse(Connection=='OperatingPhysician','Operating','Other')) %>%
rename(label = Doc2) %>%
select(label,type)
nodes = full_join(source,destination, by='label') %>% rowid_to_column("id") %>% drop_na()
nodes
nodes = full_join(source,destination, by=c('label','type') %>% rowid_to_column("id") %>% drop_na()
per_route = docs %>%
nodes = full_join(source,destination, by=c('label','type')) %>% rowid_to_column("id") %>% drop_na()
nodes
nodes.type %>% distinct()
nodes$type %>% distinct()
nodes %>% distinct(type)
library(tidyverse)
library(network)
docs = read_csv('./data/docConnet.csv')
generate_Network = function(docs){
source = docs %>%
distinct(Doc1) %>%
rename(label = Doc1) %>% mutate(type = "Attending")
destination = docs %>%
distinct(Doc2,Connection) %>%
mutate(type = ifelse(Connection=='OperatingPhysician','Operating','Other')) %>%
rename(label = Doc2) %>%
select(label,type)
nodes = full_join(source,destination, by=c('label','type')) %>% rowid_to_column("id") %>% drop_na()
per_route = docs %>%
group_by(Doc1,Doc2,Connection) %>%
summarise(weight = sum(ClaimsFiled)) %>%
ungroup()
per_rotute = per_route %>% rowid_to_column()
edges = per_route %>%
left_join(nodes, by=c('Doc1' = 'label')) %>%
rename(from=id)
edges = edges %>%
left_join(nodes, by = c("Doc2" = 'label')) %>%
rename(to = id)
edges = select(edges,from, to, Connection, weight)
docNet <- network(edges, vertex.attr = nodes,
matrix.type = "edgelist", ignore.eval = FALSE)
}
docs = filter(docs, State == 23, Provider == 'PRV53918') %>% select(-X1)
docs = docs[complete.cases(docs),]
docNet = generate_Network(docs)
docNet
edges = per_route %>%
left_join(nodes, by=c('Doc1' = 'label')) %>%
rename(from=id)
edges
per_route = docs %>%
group_by(Doc1,Doc2) %>%
summarise(weight = sum(ClaimsFiled)) %>%
ungroup() %>% rowid_to_column()
edges = per_route %>%
left_join(nodes, by=c('Doc1' = 'label')) %>%
rename(from=id)
edges
edges = edges %>%
left_join(nodes, by = c("Doc2" = 'label')) %>%
rename(to = id)
edges = select(edges,from, to, weight)
edges
docNet <- network(edges, vertex.attr = nodes,
matrix.type = "edgelist", ignore.eval = FALSE)
docNet
docs = filter(docs, State == 23, Provider == 'PRV53918') %>% select(-X1)
docs = filter(docs, State == 23)# %>% select(-X1)
docs = docs[complete.cases(docs),]
docNet = generate_Network(docs)
library(tidyverse)
library(network)
docs = read_csv('./data/docConnet.csv')
generate_Network = function(docs){
source = docs %>%
distinct(Doc1) %>%
rename(label = Doc1) %>% mutate(type = "Attending")
destination = docs %>%
distinct(Doc2,Connection) %>%
mutate(type = ifelse(Connection=='OperatingPhysician','Operating','Other')) %>%
rename(label = Doc2) %>%
select(label,type)
nodes = full_join(source,destination, by=c('label','type')) %>% rowid_to_column("id") %>% drop_na()
per_route = docs %>%
group_by(Doc1,Doc2) %>%
summarise(weight = sum(ClaimsFiled)) %>%
ungroup() %>% rowid_to_column()
edges = per_route %>%
left_join(nodes, by=c('Doc1' = 'label')) %>%
rename(from=id)
edges = edges %>%
left_join(nodes, by = c("Doc2" = 'label')) %>%
rename(to = id)
edges = select(edges,from, to, weight)
docNet <- network(edges, vertex.attr = nodes,
matrix.type = "edgelist", ignore.eval = FALSE)
}
data = filter(docs, State == 23)# %>% select(-X1)
data = data[complete.cases(data),]
docNet = generate_Network(data)
docNet
library(ggraph)
library(igraph)
ggraph(docNet) +
geom_edge_fan(color="gray50", width=0.8, alpha=0.5) +
geom_node_point() +
theme_bw() # add nodes to the plot
library(tidyverse)
library(network)
docs = read_csv('./data/docConnet.csv')
generate_Network = function(docs){
source = docs %>%
distinct(Doc1) %>%
rename(label = Doc1) %>% mutate(type = "Attending")
destination = docs %>%
distinct(Doc2,Connection) %>%
mutate(type = ifelse(Connection=='OperatingPhysician','Operating','Other')) %>%
rename(label = Doc2) %>%
select(label,type)
nodes = full_join(source,destination, by=c('label','type')) %>% rowid_to_column("id") %>% drop_na()
per_route = docs %>%
group_by(Doc1,Doc2) %>%
summarise(weight = sum(ClaimsFiled)) %>%
ungroup() %>% rowid_to_column()
edges = per_route %>%
left_join(nodes, by=c('Doc1' = 'label')) %>%
rename(from=id)
edges = edges %>%
left_join(nodes, by = c("Doc2" = 'label')) %>%
rename(to = id)
edges = select(edges,from, to, weight)
docNet <- network(edges, vertex.attr = nodes,
matrix.type = "edgelist", ignore.eval = FALSE)
}
data = filter(docs, State == 23)# %>% select(-X1)
data = data[complete.cases(data),]
generate_Network(data)
edges
library('network')
doc_net <- network(edges,  vertex.attr=nodes, matrix.type="edgelist",
loops=F, multiple=F, ignore.eval = F)
detach('package:network')
library('network')
doc_net <- network(edges,  vertex.attr=nodes, matrix.type="edgelist",
loops=F, multiple=F, ignore.eval = F)
#detach('package:network')
library(ggraph)
library(igraph)
ggraph(doc_net) +
geom_edge_fan(color="gray50", width=0.8, alpha=0.5) +
geom_node_point() +
theme_bw() # add nodes to the plot
ggraph(doc_net) +
geom_edge_arc(color="gray", curvature=0.3, aes(size=weight)) +
geom_node_point(color="orange") +
geom_node_text(aes(label = label), size=2, color="black", repel=T) +
theme_void()
par(mar=c(0,0,0,0))
render.d3movie(net3, usearrows = F, displaylabels = F, bg="#111111",
vertex.border="#ffffff",
#vertex.col =  net3 %v% "col",
#vertex.cex = (net3 %v% "audience.size")/8,
edge.lwd = (net3 %e% "weight")/3,
edge.col = '#55555599',
vertex.tooltip = paste("<b>Name:</b>", (net3 %v% 'label')),
#"<br>",
#"<b>Type:</b>", (net3 %v% 'type.label')),
edge.tooltip = paste("<b>Connection to Source:</b>", (net3 %e% 'Connection'), "<br>",
"<b>Number of Claims Filed:</b>", (net3 %e% "weight" ) ),
launchBrowser=F, filename="Doc-Network.html")
par(mar=c(0,0,0,0))
render.d3movie(doc_net, usearrows = F, displaylabels = F, bg="#111111",
vertex.border="#ffffff",
#vertex.col =  net3 %v% "col",
#vertex.cex = (net3 %v% "audience.size")/8,
edge.lwd = (net3 %e% "weight")/3,
edge.col = '#55555599',
vertex.tooltip = paste("<b>Name:</b>", (net3 %v% 'label')),
#"<br>",
#"<b>Type:</b>", (net3 %v% 'type.label')),
edge.tooltip = paste("<b>Connection to Source:</b>", (net3 %e% 'Connection'), "<br>",
"<b>Number of Claims Filed:</b>", (net3 %e% "weight" ) ),
launchBrowser=F, filename="Doc-Network.html")
